#!/usr/bin/env python3

# clean up svgs generated by magic's plot command
# tested with magic 8.3.397 and cairo 1.18

import sys
import xml.etree.ElementTree as ET

try:
    svgfile = sys.argv[1]
except IndexError:
    print(f'Usage: {sys.argv[0]} input.svg', file=sys.stderr)
    exit(1)

ns = {'': 'http://www.w3.org/2000/svg', 'xlink': 'http://www.w3.org/1999/xlink'}
for k, v in ns.items():
    ET.register_namespace(k, v)
svg = '{' + ns[''] + '}'
xlink = '{' + ns['xlink'] + '}'

tree = ET.parse(svgfile)
root = tree.getroot()
defs = root.find('defs', ns)

for f in defs.findall('filter', ns):
    defs.remove(f)

parent_map = {c: p for p in tree.iter() for c in p}
del_masks = set()
del_mask_attrs = set()
del_filter_gs = set()
for t in root.iter():
    f = t.get('filter')
    if f is not None:
        if f == 'url(#filter-remove-color-and-invert-alpha)':
            p = parent_map[t]
            mi = p.get('id')
            if mi is not None:
                del_masks.add(mi)
                del_mask_attrs.add(f'url(#{mi})')
        elif f == 'url(#filter-remove-color)' or f == 'url(#filter-color-to-alpha)':
            t.attrib.pop('filter')
        else:
            del_filter_gs.add(f)

for m in defs.findall('mask', ns):
    if m.get('id') in del_masks:
        defs.remove(m)

for g in defs.iter():
    if g.get('mask') in del_mask_attrs:
        g.attrib.pop('mask')
    for sg in g.findall('g', ns):
        if sg.get('filter') in del_filter_gs:
            g.remove(sg)

for p in root.findall('path', ns):
    root.remove(p)

cg = {}
for t in root.iter():
    ti = t.get('id')
    if ti is not None:
        if ti.startswith('compositing-group-'):
            tv = int(ti.replace('compositing-group-', ''))
            cg[tv] = t

for i in sorted(cg.keys()):
    if i % 3 == 0:
        fr = cg[i+1].find('g', ns).find('rect', ns)
        f = fr.get('fill')
        fo = fr.get('fill-opacity')
        tg  = cg[i]
        for tr in tg.findall('rect', ns):
            if tr.get('fill-opacity') == '0':
                tg.remove(tr)
        for tp in tg.findall('path', ns):
            tp.set('fill', f)
            tp.set('fill-opacity', fo)
    if i % 3 == 2 and i > 2:
        for sg in cg[i].iter():
            for p in sg.findall('path', ns):
                if p.get('stroke') == 'rgb(0%, 0%, 60.392159%)':
                    sg.remove(p)

for g in root.iter():
    if g.get('filter') is not None:
        g.attrib.pop('filter')

cleanup = True
while cleanup:
    empty = []
    parent_map = {c: p for p in tree.iter() for c in p}
    for g in root.iter():
        if g.tag == f'{svg}g':
            if len(g) == 0:
                empty.append(g)
    cleanup = bool(empty)
    for g in empty:
        parent_map[g].remove(g)

g = cg[2].find('g', ns)
sg = g.find('g', ns)
if sg.get('clip-path') == 'url(#clip-0)':
    g.remove(sg)

mg = root.find('g', ns)
mg.remove(mg.find('rect', ns))
cg[2].attrib.pop('id')
mg.append(cg[2])

for i in sorted(cg.keys()):
    if i % 3 != 1 and i != 2:
        if len(cg[i]) > 0:
            if cg[i].get('transform') is not None:
                cg[i].attrib.pop('id')
                mg.append(cg[i])
            else:
                for ch in cg[i]:
                    mg.append(ch)

for g in defs.findall('g', ns):
    gi = g.get('id')
    if gi is not None:
        if gi.startswith('compositing-group-'):
            defs.remove(g)

for m in defs.findall('mask', ns):
    for u in m.findall('use', ns):
        if u.get(f'{xlink}href').startswith('#compositing-group-'):
            m.remove(u)
    if len(m) == 0:
        defs.remove(m)

tree.write(sys.stdout.buffer, encoding='utf-8', xml_declaration=True)

